trigger:
- main  # Change to your branch name if needed

pool:
  vmImage: 'ubuntu-latest'  # Use the Azure DevOps hosted Ubuntu agent

variables:
  mysqlHost: "your-mysql-host"  # Use 'localhost' if MySQL is on the same machine as the agent
  mysqlUser: "your-mysql-user"
  mysqlPassword: "$(MYSQL_PASSWORD)"  # Store this as a secret variable in Azure DevOps
  databaseName: "your-database"
  backupFile: "$(Build.ArtifactStagingDirectory)/db_backup.sql"
  sqlRepo: "Sameer4795/mysql-scripts"
  sqlScriptsPath: "$(Build.SourcesDirectory)/mysql-scripts"

steps:
- checkout: self  # Fetches the repository

- script: |
    echo "Installing MySQL client tools..."
    sudo apt-get update
    sudo apt-get install -y mysql-client
  displayName: 'Install MySQL Client'

- script: |
    echo "Cloning SQL scripts repository..."
    git clone https://github.com/Sameer4795/mysql-scripts.git $(sqlScriptsPath)
  displayName: 'Clone SQL Scripts Repo'

- script: |
    echo "Creating MySQL backup..."
    mysqldump -h $(mysqlHost) -u $(mysqlUser) -p$(mysqlPassword) $(databaseName) > $(backupFile)
  displayName: 'Backup MySQL Database'

- script: |
    echo "Deploying SQL scripts..."
    for file in $(sqlScriptsPath)/*.sql; do
      echo "Executing $file"
      mysql -h $(mysqlHost) -u $(mysqlUser) -p$(mysqlPassword) $(databaseName) < "$file"
    done
  displayName: 'Run SQL Scripts'
  continueOnError: true  # Allow failure detection to handle rollback

- script: |
    echo "Deployment failed. Restoring backup..."
    mysql -h $(mysqlHost) -u $(mysqlUser) -p$(mysqlPassword) $(databaseName) < $(backupFile)
  displayName: 'Rollback on Failure'
  condition: failed()  # This step runs only if the previous steps fail
