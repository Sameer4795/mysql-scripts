trigger:
  - main  # Trigger pipeline on changes to the main branch

pool:
  name: Default  # Using the default agent pool

variables:
  mysqlHost: 'localhost'
  mysqlUser: 'root'
  mysqlPassword: $(MYSQL_PASSWORD)
  databaseName: 'my_database'
  sqlRepo: 'https://github.com/Sameer4795/mysql-scripts1.git'  # GitHub repo with SQL scripts
  sqlFile: 'setup.sql'  # SQL script to execute
  backupFile: '$(Build.ArtifactStagingDirectory)/mysql_backup.sql'

steps:
  # ✅ Debug: Check MySQL Password Variable
  - script: |
      echo "Checking if MYSQL_PASSWORD is set..."
      if [ -z "$(mysqlPassword)" ]; then
        echo "MYSQL_PASSWORD is empty! Please set it in Azure DevOps."
        exit 1
      else
        echo "MYSQL_PASSWORD is set."
      fi
    displayName: 'Debug: Check MySQL Password Variable'

  # ✅ Clone SQL scripts repository
  - script: |
      echo "Cloning MySQL scripts repository..."
      git clone $(sqlRepo) $(Build.SourcesDirectory)/mysql-scripts
    displayName: 'Clone MySQL Scripts Repository'

  # ✅ List contents of cloned repository
  - script: |
      echo "Listing contents of $(Build.SourcesDirectory)/mysql-scripts..."
      ls $(Build.SourcesDirectory)/mysql-scripts
    displayName: 'List Contents of mysql-scripts Directory'

  # ✅ Install MySQL client if not installed
  - script: |
      echo "Installing MySQL client..."
      sudo apt-get update
      sudo apt-get install mysql-client -y
    displayName: 'Install MySQL Client'

  # ✅ Test MySQL Connection
  - script: |
      echo "Testing MySQL connection..."
      mysql -h $(mysqlHost) -u $(mysqlUser) --password=$(mysqlPassword) -e "SHOW DATABASES;"
    displayName: 'Test MySQL Connection'

  # ✅ Backup MySQL Database Before Running SQL Script
  - script: |
      echo "Taking MySQL database backup..."
      mysqldump -h $(mysqlHost) -u $(mysqlUser) --password=$(mysqlPassword) $(databaseName) > $(backupFile)
      echo "Backup completed. File saved at: $(backupFile)"
    displayName: 'Backup MySQL Database'

  # ✅ Upload the Backup File as an Artifact
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(backupFile)'
      artifactName: 'MySQLBackup'
    displayName: 'Upload MySQL Backup to Artifacts'

  # ✅ Download Backup File from Artifacts (For Restoration)
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      artifactName: 'MySQLBackup'
      downloadPath: '$(Build.ArtifactStagingDirectory)'
    displayName: 'Download MySQL Backup from Artifacts'

  # ✅ Restore MySQL Database from Backup
  - script: |
      echo "Checking if database exists..."
      DB_EXISTS=$(mysql -h $(mysqlHost) -u $(mysqlUser) --password=$(mysqlPassword) -e "SHOW DATABASES LIKE '$(databaseName)';" | grep $(databaseName) || echo "NO")

      if [ "$DB_EXISTS" = "$(databaseName)" ]; then
          echo "Database $(databaseName) exists. Dropping and recreating..."
          mysql -h $(mysqlHost) -u $(mysqlUser) --password=$(mysqlPassword) -e "DROP DATABASE $(databaseName);"
      fi

      echo "Creating new database $(databaseName)..."
      mysql -h $(mysqlHost) -u $(mysqlUser) --password=$(mysqlPassword) -e "CREATE DATABASE $(databaseName);"

      echo "Restoring MySQL database from backup..."
      mysql -h $(mysqlHost) -u $(mysqlUser) --password=$(mysqlPassword) $(databaseName) < $(Build.ArtifactStagingDirectory)/mysql_backup.sql

      echo "Verifying restored database..."
      mysql -h $(mysqlHost) -u $(mysqlUser) --password=$(mysqlPassword) -e "SHOW TABLES;" $(databaseName)
    displayName: 'Restore MySQL Database'

  # ✅ Run the SQL script from GitHub to Deploy Database
  - script: |
      echo "Running SQL script..."
      mysql -h $(mysqlHost) -u $(mysqlUser) --password=$(mysqlPassword) $(databaseName) < $(Build.SourcesDirectory)/mysql-scripts/$(sqlFile)
    displayName: 'Run SQL Script'
    condition: succeeded()  # Only run if previous steps succeed
